STEPS TO MAKE A PACKAGE:
#create new packages always in the src folder of the main workspace(catkin_ws)
#perform catkin_make
#perform . ~/catkin_ws/devel/setup.bash
#edit the package.xml file
#perform  source /opt/ros/kinetic/setup.bash
ï»¿#then catkin_make, this is used to build all the packages found in the src folder of the main workspace
#make a .msg file if needed and save in a msg folder which is directly under the main package
#if a msg is added then make sure that in the package.xml file the build_depend and the exec_depend tags for the messages are uncommented
#change the CMakeLists.txt by adding message_generation in find_package block, adding the .msg file in add_message_files block, adding message_runtime in the catkin_package block and finally uncomment the generate_messages block
#then service files can be added to the package by making a srv folder and then copying the srv file from another existing package 
#then make changes to package.xml and CMakeLists.txt
#just make sure both the files are working by using rosmsg show and rossrv show
#after this perform catkin_make install in the catkin_ws directory
#If you are building C++ nodes which use your new messages, you will also need to declare a dependency between your node and your message, as described in the catkin msg/srv build documentation. 
#create a scripts folder in the package to store the publisher and the subscriber files
#make the files executable by chmod +x <file>.py
#after this go to your main worstation and perform catkin_make
#open roscore
#run both the files (publisher and subscriber)	(rosrun <package> <filename>)
#incase you want to save the items being published, create a bag folder to save the data






IMPORTANT TERMS AND NOTES:
Nodes: A node is an executable that uses ROS to communicate with other nodes.
Messages: ROS data type used when subscribing or publishing to a topic.
Topics: Nodes can publish messages to a topic as well as subscribe to a topic to receive messages.
Master: Name service for ROS (i.e. helps nodes find each other)
rosout: ROS equivalent of stdout/stderr
roscore: Master + rosout + parameter server (parameter server will be introduced later) 
topic type depends on the type of message that is going to be published and subscribed to
Services are another way that nodes can communicate with each other. Services allow nodes to send a request and receive a response. 
if service is empty it takes no arguements, send no data while requesting and recives no data in response
rosparam allows you to store and manipulate data on the ROS Parameter Server
rqt_console attaches to ROS's logging framework to display output from nodes. rqt_logger_level allows us to change the verbosity level (DEBUG, WARN, INFO, and ERROR) of nodes as they run. 
msg: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.
srv: an srv file describes a service. It is composed of two parts: a request and a response. 
rospy.loginfo(str) performs triple-duty: the messages get printed to screen, it gets written to the Node's log file, and it gets written to rosout. rosout is a handy for debugging: you can pull up messages using rqt_console instead of having to find the console window with your Node's output.
rvis: rviz is a visualization tool that is useful for examining tf2 frames. Let's look at our turtle frames using rviz. 




FUNCTIONS:
roscd 
rospack find
rospack depends1 <package-name> just the main dependencies
rospack depends <package-name> prints all the sub dependencies too
rosls
catkin_make
source devel/setup.bash
catkin_create_pkg <package_name> [depend1] [depend2] [depend3]
. ~/catkin_ws/devel/setup.bash
cat package.xml
roscore
rosnode list, lists the current nodes that are running
rosnode info /<node>, returns the information about the node mentioned
rosrun [package_name] [node_name]
rosnode cleanup
rosnode ping <node-name>
rostopic -h lets you get all the rostopic commands
rostopic echo <topic-name> shows the data published by that topic
rostopic list -h help menu for rostopis list command
rostopid type <topic-name> displays the type of messages that are being transferred
rosmsg show <type of message> displays the details of that kind of message
rostopic pub [topic] [msg_type] [args] to publish data on the given currently active topic

eg. rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, 1.8]' 
	rostopic pub: publish to a topic
	-1: to publish once and then exit
	then topic name
	then type of msgs
	--: double dash tells the option parser that none of the arguements are options
	then 2 vectors because the type of message has two arguements that are linear and angular
eg.  rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]'
	for continuous publication
	
rosrun rqt_graph rqt_graph for showing all the publishers,topics and subscribers and their connections
rosrun rqt_plot rqt_plot 
rosservice type <service> gives information about the service
rosservice type [service] | rossrv show to show the required arguements for the service call
rosservice call [service] [args] is used to call a service
rosparam list to get all the params available to change
rosparam set <param-name> <value> to set a parameter, after this rosservice call /clear needs to run to show the changes in the parameter
rosparam get <param-name> to get the valur of the param
rosparam dump [file_name] [namespace] to save the parameters in the given filename (.yaml)
rosparam load [file_name] [namespace] to load the parameters form the given filename
eg. after loading this can be run:
	rosparam get /copy/background_b		(copy is the namespace)
	to get the value of the parameter

rqt_console
rqt_logger_level
roslaunch [package] [filename.launch] launches nodes as defined in the launch file
eg. roslaunch beginner_tutorials turtlemimic.launch 
	after this use rostopic pub to publish to one of the topics and then the other turtlesim window that is created will copy the commands
	rostopic pub /turtlesim1/turtle1/cmd_vel geometry_msgs/Twist -r 1 -- '[2.0, 0.0, 0.0]' '[0.0, 0.0, -1.8]' 
rosed [package_name] [filename] used to edit a file directly
export EDITOR='nano -w' to change the editor to nano type
echo $EDITOR to open the editor
echo "int64 num" > msg/Num.msg to write to the msg directory present right under the main package
roscp [package_name] [file_to_copy_path] [copy_path] is used to copy files from an existing package
rossrv show <service name> to check the contents of a service
chmod +x <file>.py making files executable
rosbag record -a, records the data being published by a node and saves in the bag folder
rosbag info <your bagfile> checks then contents of a bag file without playing it back
rosbag record -O subset /turtle1/cmd_vel /turtle1/pose to record just a subset of all the topics currently running 
roswtf to trouble shoot
rosdep intall <package> to install all the system dependencies required by the package
export ROS_MASTER_URI=http://hal:<machine-ip-address> configuring ROS MASTER URI so that listener/talker example can be used form 2 different machines
snapcraft init, to create a new snapcraft.yaml file in the directory
rosrun tf2_tools view_frames.py , it creates a diagram of the frames being broadcast ny tf2 over ROS
evince frames.pdf , to see the diagram
rosrun tf tf_echo [reference_frame] [target_frame], tf_echo reports the transform between any two frames broadcast over ROS.
rosrun rviz rviz -d `rospack find turtle_tf2`/rviz/turtle_rviz.rviz


